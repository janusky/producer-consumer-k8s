apiVersion: v1
kind: Service
metadata:
  name: service-a
  labels:
    app: service-a
    component: service
spec:
  ports:
    - name: http
      port: 8080
  selector:
    app: service-a
    component: service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-a
  labels:
    app: service-a
    component: service
    version: v1
spec:
  # replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: service-a
      component: service
      version: v1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
        sidecar.istio.io/rewriteAppHTTPProbers: "false"
      labels:
        app: service-a
        component: service
        version: v1
    spec:
      containers:
        - name: service-a
          image: docker.io/janusky/service-a:dev
          resources:
            requests:
              memory: 125Mi
              cpu: 125m
            limits:
              memory: 400Mi
              cpu: 400m
          readinessProbe:
            httpGet:
              path: /api/test
              port: 8080
            initialDelaySeconds: 6
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 12
          livenessProbe:
            httpGet:
              path: /api/health
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 3
          env:
            - name: LOG_LEVEL
              value: info
            - name: GREETING
              value: "Dummy, from Service service-a"
            - name: QUEUE_NAME
              value: "service-a.greeting"
            - name: ALLOWED_ORIGINS
              value: "*"
            - name: SERVICE_B_INPUT_URL
              value: http://service-b.dev.svc.cluster.local:8080/api/greeting
            - name: RABBITMQ_CONN
              value: amqp://guest:guest@rabbitmq.dev.svc.cluster.local:5672
          ports:
            - containerPort: 8080
          imagePullPolicy: IfNotPresent #Always
---
apiVersion: v1
kind: Service
metadata:
  name: service-b
  labels:
    app: service-b
    component: service
spec:
  ports:
    - name: http
      port: 8080
  selector:
    app: service-b
    component: service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-b
  labels:
    app: service-b
    component: service
    version: v1
spec:
  # replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: service-b
      component: service
      version: v1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
        sidecar.istio.io/rewriteAppHTTPProbers: "false"
      labels:
        app: service-b
        component: service
        version: v1
    spec:
      containers:
        - name: service-b
          image: docker.io/janusky/service-b:dev
          resources:
            requests:
              memory: 125Mi
              cpu: 125m
            limits:
              memory: 400Mi
              cpu: 400m
          readinessProbe:
            httpGet:
              path: /api/test
              port: 8080
            initialDelaySeconds: 6
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 12
          livenessProbe:
            httpGet:
              path: /api/health
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 3
          env:
            - name: LOG_LEVEL
              value: info
            - name: QUEUE_NAME
              value: "service-a.greeting"
            - name: MONGO_CONN
              value: mongodb://username:password@mongo-service.dev:27017/admin
            - name: RABBITMQ_CONN
              value: amqp://guest:guest@rabbitmq.dev.svc.cluster.local:5672
          ports:
            - containerPort: 8080
          imagePullPolicy: IfNotPresent #Always
